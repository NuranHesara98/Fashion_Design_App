import { OpenAI } from 'openai';
import * as fs from 'fs';
import * as path from 'path';
import { v4 as uuidv4 } from 'uuid';
import { ImageGenerationResult } from '../types/imageTypes';

/**
 * Generates an image using OpenAI's DALL-E API
 * 
 * @param prompt The text prompt to generate an image from
 * @param sketchPath Optional path to a sketch image to use as a reference
 * @returns Promise with the result containing either an image URL or error
 */
export const generateImageWithOpenAI = async (
  prompt: string,
  sketchPath?: string
): Promise<ImageGenerationResult> => {
  try {
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY is not set in environment variables');
    }

    console.log(`Generating image with OpenAI DALL-E. Prompt: "${prompt}"`);
    
    // Create OpenAI client
    const openai = new OpenAI({
      apiKey: apiKey
    });
    
    // Prepare the request options
    const requestOptions: any = {
      model: "dall-e-2", // Using dall-e-2 for cost-effectiveness
      prompt: prompt,
      n: 1,
      size: "1024x1024", // Using 1024x1024 size
      response_format: "url" // Options: "url" or "b64_json"
    };

    // If a sketch path is provided, we would need to implement image variation
    // This would require a different API endpoint and approach
    if (sketchPath && fs.existsSync(sketchPath)) {
      console.log(`Sketch provided at path: ${sketchPath}`);
      // Note: OpenAI's image variation API works differently and would need a separate implementation
    }

    // Make the API request using the OpenAI SDK
    const response = await openai.images.generate(requestOptions);
    
    // Extract the image URL from the response
    const imageUrl = response.data[0].url;
    
    if (!imageUrl) {
      throw new Error('No image URL returned from OpenAI API');
    }

    console.log('Image generated successfully with OpenAI DALL-E');
    
    return {
      success: true,
      imageUrl: imageUrl,
      provider: 'openai'
    };
  } catch (error: any) {
    console.error('Error generating image with OpenAI DALL-E:', error);
    
    let errorMessage = 'Failed to generate image with OpenAI';
    
    if (error.response) {
      console.error('OpenAI API error response:', error.response.data);
      errorMessage = `OpenAI API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`;
    } else if (error.message) {
      errorMessage = `Error: ${error.message}`;
    }
    
    return {
      success: false,
      error: errorMessage,
      provider: 'openai'
    };
  }
};

/**
 * Generates text using OpenAI's GPT API
 * 
 * @param prompt The prompt to generate text from
 * @returns Promise with the generated text
 */
export const generateTextWithOpenAI = async (prompt: string): Promise<ImageGenerationResult> => {
  try {
    const apiKey = process.env.OPENAI_API_KEY;
    
    if (!apiKey) {
      throw new Error('OPENAI_API_KEY is not set in environment variables');
    }

    console.log(`Generating text with OpenAI GPT. Prompt: "${prompt}"`);
    
    // Create OpenAI client
    const openai = new OpenAI({
      apiKey: apiKey
    });
    
    // Prepare the request options
    const requestOptions: any = {
      model: "gpt-4o", // You can also use "gpt-3.5-turbo" for a more cost-effective option
      messages: [
        {
          role: "user",
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 500
    };

    // Make the API request using the OpenAI SDK
    const response = await openai.chat.completions.create(requestOptions);
    
    // Extract the generated text from the response
    const generatedText = response.choices[0]?.message?.content?.trim() || '';
    
    if (!generatedText) {
      throw new Error('No text generated by OpenAI API');
    }

    console.log('Text generated successfully with OpenAI GPT');
    
    return {
      success: true,
      textResponse: generatedText,
      provider: 'openai'
    };
  } catch (error: any) {
    console.error('Error generating text with OpenAI GPT:', error);
    
    let errorMessage = 'Failed to generate text with OpenAI';
    
    if (error.response) {
      console.error('OpenAI API error response:', error.response.data);
      errorMessage = `OpenAI API error: ${error.response.status} - ${JSON.stringify(error.response.data)}`;
    } else if (error.message) {
      errorMessage = `Error: ${error.message}`;
    }
    
    return {
      success: false,
      error: errorMessage,
      provider: 'openai'
    };
  }
};
